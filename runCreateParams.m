clc
clear

addpath(genpath('./utils/'));

% 核函数参数
P1 = 2.^(-3:8)';

% 分类器网格搜索参数
C = 2.^(-3:1:8)';
C3 = 1e-7;% cond 矫正
EPS = [0.01;0.02;0.05;0.1];
RHO = 2.^(-3:1:8)';
MU = (0.1:0.1:1)';
ETA =(0:0.1:1)';
% MTL-aLS-SVM
RATE = [0.83,0.90,0.97]';
% MTCTSVM
P = (0.5:0.5:2.0)';
% VSTG-MTL
K = (3:2:13)';
k = (1:2:7)';

% 核函数
kernel = struct('type', 'rbf', 'p1', P1);
% kernel = struct('type', 'poly', 'p1', 2);

%% 回归任务参数
RParams = {
    struct('Name', 'SVR', 'C', C, 'eps', EPS, 'kernel', kernel);...
    struct('Name', 'PSVR', 'nu', RHO, 'kernel', kernel);...
    struct('Name', 'LS_SVR', 'gamma', RHO, 'kernel', kernel);...
    struct('Name', 'TWSVR', 'C1', C, 'C3', C3, 'eps1', EPS, 'kernel', kernel);... 
    struct('Name', 'TWSVR_Xu', 'C1', C, 'eps1', EPS, 'kernel', kernel);...
    struct('Name', 'LSTWSVR_Mei', 'C1', C, 'eps1', EPS, 'kernel', kernel);...
    struct('Name', 'LSTWSVR_Huang', 'eps1', EPS, 'kernel', kernel);...
    struct('Name', 'MTLS_SVR', 'lambda', RHO, 'gamma', RHO, 'kernel', kernel);...
    struct('Name', 'MTPSVR', 'lambda', RHO, 'nu', RHO, 'kernel', kernel);...
    struct('Name', 'MTL_TWSVR', 'C1', C, 'eps1', EPS, 'rho', RHO, 'kernel', kernel);...
    struct('Name', 'MTL_TWSVR_Xu', 'C1', C, 'eps1', EPS, 'rho', RHO, 'kernel', kernel);...
    struct('Name', 'MTLS_TWSVR', 'C1', C, 'eps1', EPS, 'rho', RHO, 'kernel', kernel);...
    struct('Name', 'LSTWSVR_Xu', 'C1', C, 'eps1', EPS, 'kernel', kernel);...
    struct('Name', 'MTLS_TWSVR_Xu', 'C1', C, 'eps1', EPS, 'rho', RHO, 'kernel', kernel)...
};

[ RParams ] = PrintParams('./params/LabRParams-Linear.txt', RParams);
save('./params/LabRParams-Linear.mat', 'RParams');
%% 分类任务参数
% ID: 实验名称
% Name: 算法名称
CParams = {
    struct('ID', 'SVM', 'Name', 'SVM', 'C', C, 'kernel', kernel);...
    struct('ID', 'PSVM', 'Name', 'PSVM', 'nu', RHO, 'kernel', kernel);...
    struct('ID', 'LS_SVM', 'Name', 'LS_SVM', 'gamma', RHO, 'kernel', kernel);...
    struct('ID', 'TWSVM', 'Name', 'TWSVM', 'C1', C, 'kernel', kernel);...
    struct('ID', 'LSTWSVM', 'Name', 'LSTWSVM', 'C1', C, 'kernel', kernel);...
    struct('ID', 'vTWSVM', 'Name', 'vTWSVM', 'v1', MU, 'kernel', kernel);...
    struct('ID', 'ITWSVM', 'Name', 'ITWSVM', 'C1', C, 'C3', C, 'kernel', kernel);...
    struct('ID', 'MTPSVM', 'Name', 'MTPSVM', 'lambda', RHO, 'nu', RHO, 'kernel', kernel);...
    struct('ID', 'MTLS_SVM', 'Name', 'MTLS_SVM', 'lambda', RHO, 'gamma', RHO, 'kernel', kernel);...
    struct('ID', 'MTL_aLS_SVM', 'Name', 'MTL_aLS_SVM', 'C1', C, 'C2', C, 'rho', RATE, 'kernel', kernel);...
    struct('ID', 'DMTSVM', 'Name', 'DMTSVM', 'C1', C, 'rho', RHO, 'kernel', kernel);...
    struct('ID', 'MCTSVM', 'Name', 'MCTSVM', 'C1', C, 'rho', RHO, 'p', P, 'kernel', kernel);...
    struct('ID', 'MTLS_TWSVM', 'Name', 'MTLS_TWSVM', 'C1', C, 'rho', RHO, 'kernel', kernel);...
    struct('ID', 'MTvTWSVM', 'Name', 'MTvTWSVM', 'v1', MU, 'rho', RHO, 'kernel', kernel);...
    struct('ID', 'MTvTWSVM2', 'Name', 'MTvTWSVM2', 'v1', MU, 'rho', ETA, 'kernel', kernel);...
};

% 保存参数表
[ CParams ] = PrintParams('./params/LabCParams.txt', CParams);
save('./params/LabCParams.mat', 'CParams');

%% 构造安全筛选的参数
% non-linear case, p1=8 for UCI, p1=64 for Caltech
clear
clc
SParams = cell(3, 1);
[ SParams{1} ] = PackSParams(10.^(0:0.02:2)', 10.^(-1:0.2:1)', 'Linear');
[ SParams{2} ] = PackSParams(10.^(0:0.02:2)', 10.^(-1:0.2:1)', 'Poly', 8);
[ SParams{3} ] = PackSParams(10.^(0:0.02:2)', 10.^(-1:0.2:1)', 'RBF', 8);
SParams = cellcat(SParams, 1);

% 保存参数
[ SParams ] = PrintParams('./params/LabSParams.txt', SParams);
Path = './params/LabSParams.mat';
fprintf('save:%s\n', Path);
save(Path, 'SParams');

%% 得到所有参数组合
IParams = CreateParams(SParams{2});

%% 打包参数
function [ SParams ] = PackSParams(c, mu, ker, p1)
    switch ker
        case 'Linear'
            kernel = struct('type', 'linear');
        case 'Poly'
            kernel = struct('type', 'poly', 'p1', p1);
        otherwise
            kernel = struct('type', 'rbf', 'p1', p1);
    end
    SParams = {
        struct('ID', 'IRMTL_C', 'Name', 'IRMTL', 'C', c, 'mu', mu, 'kernel', kernel);...
        struct('ID', 'SSRC_IRMTL', 'Name', 'SSR_IRMTL', 'C', c, 'mu', mu, 'kernel', kernel);...
        struct('ID', 'IRMTL_M', 'Name', 'IRMTL', 'mu', mu, 'C', c, 'kernel', kernel);...
        struct('ID', 'SSRM_IRMTL', 'Name', 'SSR_IRMTL', 'mu', mu, 'C', c, 'kernel', kernel);...
    };
end